<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:camel="http://camel.apache.org/schema/spring"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">

    <camelContext id="camelContext" xmlns="http://camel.apache.org/schema/spring">
        <propertyPlaceholder id="properties"
                             location="ref:ctx.properties"/>
        <route id="events-in-route">
            <from uri="{{events-in-route.start.endpoint}}"/>
            <log message="message: ${body}"/>
            <convertBodyTo type="com.eventhandler.common.protocol.Event"/>
            <log message="bean: ${body}"/>
            <setHeader headerName="class">
                <simple>${body.class}</simple>
            </setHeader>
            <setHeader headerName="runId">
                <simple>${body.runId}</simple>
            </setHeader>
            <choice>
                <when>
                    <simple>${body.class} == ${type:com.eventhandler.common.protocol.InterContext}</simple>
                    <setHeader headerName="reference">
                        <simple>${body.reference}</simple>
                    </setHeader>
                </when>
                <otherwise>
                    <setHeader headerName="reference">
                        <simple>null</simple>
                    </setHeader>
                </otherwise>
            </choice>
            <to uri="direct:wait-start"/>
        </route>

        <route>
            <from uri="direct:wait-start"/>
            <aggregate strategyRef="aggregatorStrategy" aggregationRepositoryRef="aggregatorRepo">
                <correlationExpression>
                    <header>runId</header>
                </correlationExpression>
                <completionPredicate>
                    <simple>${in.header.context.isRunning}</simple>
                </completionPredicate>
                <to uri="direct:ctx-started"/>
            </aggregate>
        </route>

        <route>
            <from uri="direct:ctx-started"/>
            <log message="Sending aggregated message: ${body}"/>
            <!--<split parallelProcessing="true">-->
            <split>
                <simple>${body}</simple>
                <idempotentConsumer messageIdRepositoryRef="idempotentRepo">
                    <simple>${body.idempotentId}</simple>
                    <to uri="direct:process"/>
                </idempotentConsumer>
            </split>
        </route>

        <route>
            <from uri="direct:process"/>
            <choice>
                <when>
                    <simple>${body.class} ==  ${type:com.eventhandler.common.protocol.InterContext}</simple>
                    <log message="Process message: ${body}"/>
                    <process ref="interProcessor"/>
                </when>
            </choice>
            <to uri="direct:wait-stop"/>
        </route>

        <route>
            <from uri="direct:wait-stop"/>
            <aggregate strategyRef="stopAggregatorStrategy" aggregationRepositoryRef="aggregatorRepo">
                <correlationExpression>
                    <header>runId</header>
                </correlationExpression>
                <completionPredicate>
                    <simple>${in.header.context.isAllProcessed}</simple>
                </completionPredicate>
                <to uri="direct:send-results"/>
            </aggregate>
        </route>

        <route id="results-out-route">
            <from uri="direct:send-results"/>
            <split>
                <simple>${body}</simple>
                <log message="Send result: ${body}"/>
                <!--<convertBodyTo type="java.lang.String"/>-->
                <to uri="{{results-out-route.end.endpoint}}"/>
            </split>
        </route>
    </camelContext>

    <bean id="interProcessor" class="com.eventhandler.core.processor.InterProcessor"/>

</beans>